
services:
  fabric-ai:
    build: ./backend
    image: fabric-ai:latest
    command: ["./fabric", "--serve", "--address=0.0.0.0:8999"]
    ports:
      - "8999:8080"
      - "5173:5173"
    volumes:
      - fabric_data:/root/.config/fabric
    environment:
      - FABRIC_ENV=production
      - .env
    networks:
      - fabric_network
      - traefik_public
    restart: unless-stopped
    labels: 
      # Traefik labels
      - "traefik.enable=true"
      - "traefik.http.routers.fabric-ai.rule=Host(`${FABRIC_AI_SUBDOMAIN}.${TRAEFIK_DOMAIN}`)"  # Domain name
      - "traefik.http.routers.fabric-ai.entrypoints=websecure"  # HTTPS entry point
      - "traefik.http.routers.fabric-ai.tls=true"  # Enable TLS/SSL
      - "traefik.http.routers.fabric-ai.tls.certresolver=myresolver"  # Let's Encrypt
      - "traefik.docker.network=traefik_public"  # Specify which network Traefik should use
      - "traefik.http.services.fabric-ai.loadbalancer.server.port=8999"  # Internal port
      - "traefik.http.routers.fabric-ai.middlewares=secure-headers@file,ip-allowlist@file,rate-limit@file"  # Security
      # HTTP to HTTPS redirect
      - "traefik.http.routers.fabric-ai-http.rule=Host(`${FABRIC_AI_SUBDOMAIN}.${TRAEFIK_DOMAIN}`)"  # HTTP rule
      - "traefik.http.routers.fabric-ai-http.entrypoints=web"  # HTTP entry point
      - "traefik.http.routers.fabric-ai-http.middlewares=https-redirect@file"  # Redirect to HTTPS

      # watchtower labels 
      - "com.centurylinklabs.watchtower.enable=true"

volumes:
  fabric_data:

networks:
  default:
    driver: bridge
  fabric_network:
    driver: bridge
  traefik_public:
    external: true
    # If you need to create the network, uncomment the following lines:
    # You can specify additional network options if needed, such as:
    # driver_opts:
    #   com.docker.network.bridge.name: "fabric_bridge" 
  